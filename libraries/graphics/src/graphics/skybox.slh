<!
//  Light.slh
//  fragment shader
//
//  Created by Olivier Prat on 5/29/2018.
//  Copyright 2018 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not SKYBOX_SLH@>
<@def SKYBOX_SLH@>

vec3 computeSkyColor() {
#ifdef PROCEDURAL

    vec3 color = getSkyboxColor();
    // Protect from NaNs and negative values
    color = mix(color, vec3(0), isnan(color));
    color = max(color, vec3(0));
    // Procedural Shaders are expected to be Gamma corrected so let's bring back the RGB in linear space for the rest of the pipeline
    color = pow(color, vec3(2.2));

    return color;

#else 
    vec3 coord = normalize(_normal);
    vec3 color = skybox.color.rgb;

    // blend is only set if there is a cubemap
    if (skybox.color.a > 0.0) {
        color = texture(cubeMap, coord).rgb;
        if (skybox.color.a < 1.0) {
            color *= skybox.color.rgb;
        }
    }

    return color;
#endif
}

<@endif@>