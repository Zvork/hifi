//  Based on fragment shader code from 
//  https://github.com/paulhoux/Cinder-Samples/blob/master/TextRendering/include/text/Text.cpp 


<@include render-utils/ShaderConstants.h@>

LAYOUT(binding=0) uniform sampler2D Font;

struct TextParams {
    vec4 color;
    vec4 outline;
};

LAYOUT(binding=0) uniform textParamsBuffer {
    TextParams params;
};

// the interpolated normal
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw

const float interiorCutoff = 0.8;
const float outlineExpansion = 0.2;
const float smoothStrength = 4.0;

float evalSDF(vec2 texCoord) {
    // retrieve signed distance
    float sdf = texture(Font, texCoord).g;
    if (params.outline.x > 0.0) {
        if (sdf > interiorCutoff) {
            sdf = 1.0 - sdf;
        } else {
            sdf += outlineExpansion;
        }
    }
    // Rely on TAA for anti-aliasing but smooth transition when minification
    // to help filtering
    float uvFootprint = length(fwidth(texCoord) * smoothStrength);
    float smoothStart = max(0.0, 0.5-uvFootprint);
    float smoothEnd = min(1.0, 0.5+uvFootprint);
    return max(smoothstep(smoothStart, smoothEnd, sdf), step(0.5, sdf));
}
