<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gondelman on 7/18/2018
//  Copyright 2018 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

layout(std140, binding=0) uniform parabolaData {
    vec3 velocity;
    float parabolicDistance;
    vec3 acceleration;
    float width;
    vec4 color;
    int numSections;
    ivec3 spare;
};

layout(location=0) out vec4 _color;

void main(void) {
    _color = color;

    float t = parabolicDistance * (float(gl_VertexID / 2) / float(numSections));

    vec4 pos = vec4(velocity * t + 0.5 * acceleration * t * t, 1);
    const float EPSILON = 0.00001;
    vec4 normal;

    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    if (dot(acceleration, acceleration) < EPSILON) {
        // Handle case where acceleration == (0, 0, 0)
        vec3 eyeUp = vec3(0, 1, 0);
        vec3 worldUp;
        <$transformEyeToWorldDir(cam, eyeUp, worldUp)$>
        normal = vec4(normalize(cross(velocity, worldUp)), 0);
    } else {
        normal = vec4(normalize(cross(velocity, acceleration)), 0);
    }
    if (gl_VertexID % 2 == 0) {
        pos += 0.5 * width * normal;
    } else {
        pos -= 0.5 * width * normal;
    }

    <$transformModelToClipPos(cam, obj, pos, gl_Position)$>
}