<@func declareForwardModelUnlit<velocity>@>

<@include LightingModel.slh@>
<@include graphics/Material.slh@>
<@include graphics/MaterialTextures.slh@>
<@include render-utils/ShaderConstants.h@>

<$declareMaterialTextures(ALBEDO)$>

layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;

layout(location=0) out vec4 _lighting;

<@if velocity@>
layout(location=1) out vec4 _velocity;

layout(location=RENDER_UTILS_ATTR_PREV_POSITION_CS) in vec4 _prevPositionCS;

<@include VelocityWrite.slh@>
<@endif@>

void main(void) {

    Material mat = getMaterial();
    BITFIELD matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedoTex)$>

    float opacity = 1.0;
    <$evalMaterialOpacity(albedoTex.a, opacity, matKey, opacity)$>;
    <$discardTransparent(opacity)$>;

    vec3 albedo = getMaterialAlbedo(mat);
    <$evalMaterialAlbedo(albedoTex, albedo, matKey, albedo)$>;
    albedo *= _color.rgb;

     if (opacity != 1.0) {
        discard;
    }
    vec4 color = vec4(albedo * isUnlitEnabled(), 1.0);

<@if velocity@>
    packDeferredFragmentLighting(_prevPositionCS, color);
<@else@>
    _lighting = color;
<@endif@>
}

<@endfunc@>