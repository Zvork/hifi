<@include gpu/Config.slh@>
<$VERSION_HEADER$>
// <$_SCRIBE_FILENAME$> 
// Generated on <$_SCRIBE_DATE$>
//
//  Created by Cl√©ment Brisset on 5/29/15.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DefaultMaterials.slh@>

<@include ForwardGlobalLight.slh@>
<$declareEvalSkyboxGlobalColor()$>

<@if not GPU_TRANSFORM_STATE_SLH@>
<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>
<@endif@>

<@include render-utils/ShaderConstants.h@>

// the albedo texture
LAYOUT(binding=0) uniform sampler2D originalTexture;

// the interpolated normal
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
layout(location=RENDER_UTILS_ATTR_POSITION_ES) in vec4 _positionES;

layout(location=0) out vec4 _lighting;

void main(void) {
    vec4 texel = texture(originalTexture, _texCoord0);
    float colorAlpha = _color.a * texel.a;

    TransformCamera cam = getTransformCamera();
    vec3 fragPosition = _positionES.xyz;

    vec4 color = vec4(evalSkyboxGlobalColor(
        cam._viewInverse,
        1.0,
        DEFAULT_OCCLUSION,
        fragPosition,
        normalize(_normalWS),
        _color.rgb * texel.rgb,
        DEFAULT_FRESNEL,
        DEFAULT_METALLIC,
        DEFAULT_ROUGHNESS),
        1.0);

    _lighting = color;
}