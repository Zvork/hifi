<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  <$_SCRIBE_TARGET$>
//
//  Created by Seth Alves on 2015-8-3
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include graphics/Material.slh@>
<@include DeferredBufferWrite.slh@>

in vec3 _normal;
in vec4 _positionWS;
in vec4 _prevPositionES;

uniform sampler2D xMap;
uniform sampler2D yMap;
uniform sampler2D zMap;
uniform vec3 voxelVolumeSize;

void main(void) {
    vec3 worldNormal = cross(dFdy(_positionWS.xyz), dFdx(_positionWS.xyz));
    worldNormal = normalize(worldNormal);

    float inPositionX = (_positionWS.x - 0.5) / voxelVolumeSize.x;
    float inPositionY = (_positionWS.y - 0.5) / voxelVolumeSize.y;
    float inPositionZ = (_positionWS.z - 0.5) / voxelVolumeSize.z;

    vec4 xyDiffuse = texture(xMap, vec2(-inPositionX, -inPositionY));
    vec4 xzDiffuse = texture(yMap, vec2(-inPositionX, inPositionZ));
    vec4 yzDiffuse = texture(zMap, vec2(inPositionZ, -inPositionY));

    vec3 xyDiffuseScaled = xyDiffuse.rgb * abs(worldNormal.z);
    vec3 xzDiffuseScaled = xzDiffuse.rgb * abs(worldNormal.y);
    vec3 yzDiffuseScaled = yzDiffuse.rgb * abs(worldNormal.x);
    vec4 diffuse = vec4(xyDiffuseScaled + xzDiffuseScaled + yzDiffuseScaled, 1.0);

    packDeferredFragment(
        _prevPositionES.xyz,
        _normal,
        1.0,
        vec3(diffuse),
        DEFAULT_ROUGHNESS,
        DEFAULT_METALLIC,
        DEFAULT_EMISSIVE,
        DEFAULT_OCCLUSION,
        DEFAULT_SCATTERING);
}
